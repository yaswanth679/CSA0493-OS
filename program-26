#include<stdio.h>

struct Process {
    int process_id;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_time;
};

void swap(struct Process *a, struct Process *b) {
    struct Process temp = *a;
    *a = *b;
    *b = temp;
}

void sort_by_priority(struct Process processes[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (processes[j].priority > processes[j+1].priority) {
                swap(&processes[j], &processes[j+1]);
            }
        }
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter details for process %d:\n", i+1);
        processes[i].process_id = i+1;
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
    }

    // Sort processes by priority
    sort_by_priority(processes, n);

    int current_time = 0;
    printf("\nGantt Chart:\n");

    // Execute processes using pre-emptive priority scheduling
    while (1) {
        int flag = 1; // To check if all processes are completed
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0 && processes[i].arrival_time <= current_time) {
                printf("| P%d ", processes[i].process_id);
                current_time += 1;
                processes[i].remaining_time -= 1;

                // Check if the process is completed
                if (processes[i].remaining_time == 0) {
                    printf("|\n");
                }

                flag = 0; // At least one process is executing
                break;
            }
        }

        if (flag) {
            // No process to execute at the current time
            printf("| Idle |\n");
            current_time += 1;
        }

        // Check if all processes are completed
        flag = 1;
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                flag = 0;
                break;
            }
        }

        if (flag) {
            break; // All processes completed
        }
    }

    return 0;
}
