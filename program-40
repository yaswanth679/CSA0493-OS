#include <stdio.h>
#include <stdlib.h>

struct Process {
    int process_id;
    int arrival_time;
    int burst_time;
    int waiting_time;
    int turnaround_time;
    int completion_time;
};

void calculateTimes(struct Process processes[], int n) {
    int currentTime = 0;

    for (int i = 0; i < n; i++) {
        processes[i].waiting_time = currentTime - processes[i].arrival_time;

        if (processes[i].waiting_time < 0) {
            processes[i].waiting_time = 0;
            currentTime = processes[i].arrival_time;
        }

        processes[i].completion_time = currentTime + processes[i].burst_time;
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;

        currentTime = processes[i].completion_time;
    }
}

void sortByBurstTime(struct Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].burst_time > processes[j + 1].burst_time) {
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
}

void displayResults(struct Process processes[], int n) {
    printf("\nProcess\t Arrival Time\t Burst Time\t Waiting Time\t Turnaround Time\t Completion Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t\t %d\t\t %d\t\t %d\t\t %d\t\t %d\n", processes[i].process_id,
               processes[i].arrival_time, processes[i].burst_time,
               processes[i].waiting_time, processes[i].turnaround_time, processes[i].completion_time);
    }

    float averageWaitingTime = 0, averageTurnaroundTime = 0;

    for (int i = 0; i < n; i++) {
        averageWaitingTime += processes[i].waiting_time;
        averageTurnaroundTime += processes[i].turnaround_time;
    }

    averageWaitingTime /= n;
    averageTurnaroundTime /= n;

    printf("\nAverage Waiting Time: %.2f\n", averageWaitingTime);
    printf("Average Turnaround Time: %.2f\n", averageTurnaroundTime);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
    }

    // Sort processes by burst time
    sortByBurstTime(processes, n);

    // Calculate waiting time, turnaround time, and completion time
    calculateTimes(processes, n);

    // Display the results
    displayResults(processes, n);

    return 0;
}
